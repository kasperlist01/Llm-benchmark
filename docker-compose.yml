version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: llm-benchmark-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=llm_benchmark
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: .
    container_name: llm-benchmark-backend
    ports:
      - "5001:5000"
    volumes:
      - ./app:/app/app
      - ./uploads:/app/uploads
    environment:
      - SECRET_KEY=your-secret-key-change-in-production
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=llm_benchmark
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: llm-benchmark-frontend
    ports:
      - "3000:3000"
    volumes:
      # Монтируем исходный код для hot reload
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/tsconfig.json:/app/tsconfig.json
      # Исключаем node_modules из монтирования (используем версию из контейнера)
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:5001
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    depends_on:
      - backend
    restart: unless-stopped
    stdin_open: true
    tty: true

volumes:
  postgres_data:
